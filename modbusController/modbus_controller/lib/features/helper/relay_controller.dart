import 'dart:io';
import 'dart:typed_data';

class RelayController {
  final String ip;
  final int port;

  RelayController({required this.ip, this.port = 502});

  static final Map<int, Map<String, List<int>>> _relayCommands = {
    0: {
      'on': [0x01, 0x05, 0x00, 0x00, 0xFF, 0x00, 0x8C, 0x3A],
      'off': [0x01, 0x05, 0x00, 0x00, 0x00, 0x00, 0xCD, 0xCA],
    },
    1: {
      'on': [0x01, 0x05, 0x00, 0x01, 0xFF, 0x00, 0xDD, 0xFA],
      'off': [0x01, 0x05, 0x00, 0x01, 0x00, 0x00, 0x9C, 0x0A],
    },
    2: {
      'on': [0x01, 0x05, 0x00, 0x02, 0xFF, 0x00, 0x2D, 0xFA],
      'off': [0x01, 0x05, 0x00, 0x02, 0x00, 0x00, 0x6C, 0x0A],
    },
    3: {
      'on': [0x01, 0x05, 0x00, 0x03, 0xFF, 0x00, 0x7C, 0x3A],
      'off': [0x01, 0x05, 0x00, 0x03, 0x00, 0x00, 0x3D, 0xCA],
    },
    4: {
      'on': [0x01, 0x05, 0x00, 0x04, 0xFF, 0x00, 0xCD, 0xFB],
      'off': [0x01, 0x05, 0x00, 0x04, 0x00, 0x00, 0x8C, 0x0B],
    },
    5: {
      'on': [0x01, 0x05, 0x00, 0x05, 0xFF, 0x00, 0x9C, 0x3B],
      'off': [0x01, 0x05, 0x00, 0x05, 0x00, 0x00, 0xDD, 0xCB],
    },
    6: {
      'on': [0x01, 0x05, 0x00, 0x06, 0xFF, 0x00, 0x6C, 0x3B],
      'off': [0x01, 0x05, 0x00, 0x06, 0x00, 0x00, 0x2D, 0xCB],
    },
    7: {
      'on': [0x01, 0x05, 0x00, 0x07, 0xFF, 0x00, 0x3D, 0xFB],
      'off': [0x01, 0x05, 0x00, 0x07, 0x00, 0x00, 0x7C, 0x0B],
    },
  };

  Future<void> toggleRelay(int relayNumber, bool turnOn) async {
    final command = _relayCommands[relayNumber]?[turnOn ? 'on' : 'off'];
    if (command == null) {
      print('Invalid relay number or command');
      return;
    }

    try {
      final socket = await Socket.connect(ip, port);
      print('Connected to $ip:$port');

      socket.add(Uint8List.fromList(command));
      print(
        'Sent: ${command.map((b) => b.toRadixString(16).padLeft(2, '0')).join(' ')}',
      );

      socket.listen((data) {
        print(
          'hey Response: ${data.map((b) => b.toRadixString(16).padLeft(2, '0')).join(' ')}',
        );
      });

      await Future.delayed(Duration(seconds: 1));
      await socket.close();
    } catch (e) {
      print('Error: $e');
    }
  }
}
